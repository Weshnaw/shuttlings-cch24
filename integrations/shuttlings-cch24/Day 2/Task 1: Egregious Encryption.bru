meta {
  name: Task 1: Egregious Encryption
  type: http
  seq: 1
}

get {
  url: {{host}}{{day}}/dest?from=10.0.0.0&key=1.2.3.255
  body: none
  auth: none
}

params:query {
  from: 10.0.0.0
  key: 1.2.3.255
}

tests {
  test("should receive 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should receive encrypted result", function() {
    const data = res.getBody();
    expect(data).to.equal('11.2.3.255');
  });
}

docs {
  Santa is having his network routers in the data center igloo upgraded to the next generation. For reasons unknown, he uses a special IP routing algorithm to obfuscate the traffic on the internal network. (An elf said that it just looks like a terrible implementation of symmetric encryption.) He now needs your help to implement a simple web API for verifying the calculations in the routing algorithm.
  
  The algorithm for IPv4 adresses is as follows:
  
  To calculate the destination IP of a packet, take the source IP and apply a key address. The formula from + key == dest (where "+" is overflowing addition) is applied to each of the four octets separately.
  
  Make a GET endpoint /2/dest that takes the query parameters from and key and responds with the dest address as text.
}
